@import 'reset';
@import 'custom_properties';
@import 'variables';
@import 'mixin';

body {
  font-family: $baseFontFamily;
  font-weight: 400;
  line-height: #{$baseLineHeight};
  color: white;
  //overflow: hidden;
}

img.bg {
  /* Set rules to fill background */
  min-height: 100%;
  min-width: 100%;
  object-fit: cover;

  /* Set up proportionate scaling */
  width: 100%;
  height: auto;

  /* Set up positioning */
  position: fixed;
  top: 0;
  left: 0;
  z-index: -1;
  filter: brightness(0.5);
}
@media screen and (max-width: 1024px) { /* Specific to this particular image */
  img.bg {
    left: 50%;
    margin-left: -512px;   /* 50% */
  }
}

/*.parallelogram {
  display: block;
  clip-path: polygon(20% 0%, 100% 0%, 80% 100%, 0% 100%);
  background: blue;
  height: 100vh;
  width: 100vw;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;
}*/
.parallelogram {
  height: 100%;
  width: 100vw;
  background-image: url('../assets/parallelogram.svg');
  background-repeat: no-repeat;
  background-size: auto 100%;
  background-position: center;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  -webkit-mask: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200" preserveAspectRatio="none"><filter id="blurMe"><feGaussianBlur in="SourceGraphic" stdDeviation="5" /></filter><polygon points="20,20 20,180 180,100" /></svg>') 0/100% 80%,
  linear-gradient(#fff, transparent);
  -webkit-mask-composite: destination-out;
  -webkit-mask-repeat: no-repeat;
  -webkit-mask-position: center;
  -webkit-mask-size: contain;
  filter: blur(5px);
  animation: animateparallelogram 5s ease-in;
  animation-iteration-count: infinite;
}

@keyframes animateparallelogram {
  0% {
    filter: blur(3px);
  }
  10% {
    filter: blur(5px);
  }
  20% {
    filter: blur(7px);
  }
  30% {
    filter: blur(8px);
  }
  40% {
    filter: blur(9px);
  }
  50% {
    filter: blur(10px);
  }
  60% {
    filter: blur(9px);
  }
  70% {
    filter: blur(8px);
  }
  80% {
    filter: blur(7px);
  }
  90% {
    filter: blur(6px);
  }
  100% {
    filter: blur(5px);
  }
}

/*

*?
 */
/*
@supports (-webkit-mask-image: url('../assets/parallelogram.svg')) {
  .parallelogram {
    -webkit-mask-image: url('../assets/parallelogram.svg');
    background-color: green !important;
  }
}
@supports not (-webkit-mask-image: url('../assets/parallelogram.svg')) {
  .parallelogram {
    background-image: url('../assets/parallelogram.svg');
    background-color: pink !important;
  }
}
@supports (mask-image: url('../assets/parallelogram.svg')) {
  .parallelogram {
    -webkit-mask-image: none;
    background-image: url('../assets/parallelogram.svg');
    background-color: blue!important;
  }
}*/


#svg {
  path {
    stroke: white;
    stroke-width: 1;
    fill: none;
    opacity: 0.5;
  }

  .frequency {
    rect {
      fill: white;

      &.background {
        fill: none;
        stroke: none;
      }
    }
  }
}

.waveform {
 /* position: absolute;
  top: 0;
  left: 0;
  z-index: 1000;*/
}

#svg {
  position: absolute;
  top: 0;
}

.towerblock {
  position: fixed;
  bottom: 0;
  left: auto;
  right: auto;
  z-index: 0;
  object-fit: scale-down;
  // height: 100vh; - put media query here
  @media screen and (max-height: 1000px) {
    height: 100vh;
  }

  svg {
    filter: drop-shadow(0px 0px 4px rgba(255, 255, 255, 1));
    animation-iteration-count: infinite;
  }
}

.animation {
  animation: shake 0.5s cubic-bezier(.36, .07, .19, .97), blur 40s ease-in;
  animation-iteration-count: infinite;
}

@keyframes blur {
  0%, 48% {
    filter: blur(0)
  }
  50% {
    filter: blur(50px)
  }
  52%, 100% {
    filter: blur(0px)
  }
}

@keyframes shake {
  10%, 90% {
    transform: translate3d(-1px, 0, 0);
  }

  20%, 80% {
    transform: translate3d(1px, 0, 0);
  }

  40%, 80% {
    transform: translate3d(1px, 1px, 1px);
  }

  50%, 80% {
    transform: translate3d(0px, 2px, 1px);
  }

  30%, 50%, 70% {
    transform: translate3d(-1px, 0, 0);
  }

  40%, 60% {
    transform: translate3d(1px, 0, 0);
  }
}

